# AngularFeatures

@NgModule({imports:[], exports:[],declartions:[],providers:[]})?

/** 
	Make proper handling of back button.
**/

/**
We can use Services for shared data service
@Injectable({
})
export class Service{
private String backgroundColor = 'yellow'
get backgroundColor(){
 return this.backgroundColor;
}

set backgroundColor(text){
  this.backgroundColor = text;
}

}
//Component
@Component({
selector: 'component1'
template: ` <input type="text" [(ngModel)]=backgroundColor [style.background]=backgroundColor>
private _service : Service 

const(private _service1: Service){
   this._service = _service1
   // Note if we use new Keyword for assigning like below then on close of component the value will be reset
   // this._service = new Service();
}

//Component
@Component({
selector: 'component2'
template: ` <input type="text" [(ngModel)]=backgroundColor [style.background]=backgroundColor>
private _service : Service 

const(private _service1: Service){
   this._service = _service1
}

In above case if we update value in input box of component1 and navigate to another component2 then the value will be updated, its called shared data service.
**/

@Injectable({
  // we declare that this service should be created
  // by the root application injector.
  providedIn: 'root',
})

make all the service provided in root
@Injectable({
  providedIn: 'root'
})

Setup Lint
component should just have only presentation value any http is to be written in service.

***
Mark all your core module components with <cm-name>

***
Note core modules are singleton and all the components are mainly used in app module.
except service which will be injected 

**
Use @SkipSelf @Optional for singleton pattern.

**
All lazy loaded modules dont import to AppModule,
Instead create AppRouter with loadChilder: path#Module and then include in AppModule, and corresponding Modules create router and
add router default= '' with component and load it as router.forChild(router)


//What is singleton patttern:
Assume that you create a service and we try to register the service in App Module, then single object of service is created and when we do injection in component using constructor then single object will be autowired.
So howmuch ever components we have, we will be having single instance of service.

For injecting service in component why are we not creating @inject because @component internally contains injectable features.

Only for service extension is not required.

If one service is dependent on another service then we use @Injectable.

** Core Module is a Service Module and should be imported only in AppModule
   Eg: UserModule has services like SignUpService,SignInService,SocialAuthService and UserProfileService.
   So where ever i import UserModule all the service will be aviailable.
 where as
** SharedModule is set of Components,Directive,Pipes 
   E.g: UIModule has all these ButtonComponent, NavComponent, SlideShowComponent, HighlightLinkDirective,CtaPipe.
   So everytime we need to use one or all of its exported elements, you import just the UIModule.
   So basically, due to how angular deals with services, when you start splitting functionalities into feature modules, you have to 
   isolate the services into their own modules, while other stuff can be onrganized betwee them a you wish.
   
   Core module is ServiceModule and SharedModule is Widget modules. So we have to import coremodule into AppModule and latter in all modules that need it.
   From above example the UserModule would be imported by the CoreModule and UIModule by the SharedModule.
   
   Personally, I think that the biggest confusion is regarding the naming choices. In general, people will think that everything that is part of your app's core (i.e. User stuff, NavBar, load bar, toasters etc) will go into the CoreModule and everything that's shared across multiple features would go into the SharedModule.
   That's not actually true and a bit misleading, since all services are shared between all modules "by nature" and no service should be included in the SharedModule, as well as a NavbarComponent is part of the core of your app and no component should be included in the CoreModule.
   
FEATURE   CAN BE                 SOME
MODULE    IMPORTED BY            EXAMPLES

Domain    Feature, AppModule     ContactModule (before routing)
Routed    Nobody                 ContactModule, DashboardModule,
Routing   Feature (for routing)  AppRoutingModule, ContactRoutingModule
Service   AppModule              HttpModule, CoreModule
Widget    Feature                CommonModule, SharedModule

https://stackoverflow.com/questions/42695931/angular2-coremodule-vs-sharedmodule

https://blog.chai-jay.com/angular-core-vs-shared-modules/

SharedModule Service :
https://www.gurustop.net/blog/2017/02/14/shared-modules-in-angular-apps-providers-best-practices-and-what-does-forroot-do/

Folder Structure:
https://medium.com/@motcowley/angular-folder-structure-d1809be95542

Folder Structure:

---Details 1 with example---

- app.module.ts
- app.component.ts
- modules
    - login
       - components
          - input
            input.component.ts
          - pwCheck
            pwCheck.component.ts
       - pages
          - login
            login.page.ts
       login.service.ts
       login.module.ts
       login.routes.ts

    - organisation
       - components
          - input
            input.component.ts
          - pwCheck
            pwCheck.component.ts
       - pages
          - organisation
            organisation.page.ts
          - robot
            robot.page.ts
       organisation.service.ts
       organisation.module.ts
       organisation.routes.ts
- shared
   - components
   - mocks
   - models
   - ...
   

----Details 2----
- app.module.ts
- app.component.ts
- modules
    - module1
       - components
       - pages
       module1.service.ts
       module1.module.ts
       module1.routes.ts

    - module2
       - components
       - pages
       module2.service.ts
       module2.module.ts
       module2.routes.ts
- shared
   - components
   - mocks
   - models
   - directives
   - pipes
   
Setup Logger

https://angular.io/guide/dependency-injection#injectable-ngmodule-or-component

https://www.intertech.com/Blog/deploying-angular-4-apps-with-environment-specific-info/

Setup Karma and PhantomJS

Even better, make a lint rule for detecting observables that are not unsubscribed.

Single Responsibility Principle for components

1. Can Angular Scale up to 5000 concurrent user.
2. How to hide the api response in XHR
Angular Velocity Measurement
3. Why should i test Angular
https://serverfault.com/questions/350454/how-do-you-do-load-testing-and-capacity-planning-for-web-sites
Use cache and check 304 response code
4. Best practice for function Naming'

5.Note, the $ suffix in our variable name is simply a naming convention to communicate this variable holds an Observable.

6. all observable unsubscribe if we are not using pipes.
Not required if we use async

7.AsyncPipe

Before we go any farther; if you are using observable streams via the AsyncPipe then you do not need to worry about unsubscribing. The async pipe will take care of subscribing and unsubscribing for you.

8.*ngFor="let user of users$ | async as users; index as i

9.
<div *ngIf="user$ | async as user">
        Hi, {%raw%}{{ user.name }}!{%endraw%}
    </div>

10.<div *ngIf="condition; else elseBlock">...</div>
<ng-template #elseBlock>...</ng-template> 

11.<div *ngIf="condition; then thenBlock else elseBlock"></div>
<ng-template #thenBlock>...</ng-template>
<ng-template #elseBlock>...</ng-template> 

12.	 myThenBlock: TemplateRef<any> = null;

13.  @ViewChild('firstThenBlock')
	 firstThenBlock: TemplateRef<any> = null;

14. private productsObservable : Observable<any[]> ; 
 this.productsObservable = this.httpClient.get(this.baseUrl + '/products');

 <li *ngFor="let product of productsObservable | async " >
    -- id: 
    -- name: 
    -- cost: 
    -- quantity: 
  </li>

15. Create DataTypes
export class Product {
    id: number;
    name: string;
    cost: number;
    quantity: number;
    locationId: number;
    familyId: number;
    constructor() { }
} 

private products : Product[] = []; 

private productsObservable : Observable<Product[]> ; 

    this.productsObservable = this.dataService.get_products();


16.Injectable HttpInterceprtor that can be injected HttpClient

17. Query predicates can be renamed LQuery and LQuery to 

18. However, in Angular, a page is a component, or at least a collection of components. In our website, we very much have a concept of navigating to particular pages. In other Angular apps, this would almost certainly not be the case. So, I was keen to bring in the idea of pages in order to lighten that components folder.
www.awesome-o.com/login
www.awesome-o.com/dashboard
www.awesome-o.com/organisation/robot
But wait, if we’re putting the ‘page’ component with the module, why don’t we just put all related components for a module in the module folder?? And while we’re at it, any services related to the module in with the module? Each module is essentially its own self-contained app.

What about sharing components?! Someone once screamed at me. The whole point of components is to make them easy to share! Well, we can have a shared folder for any components like that. Putting that altogether

